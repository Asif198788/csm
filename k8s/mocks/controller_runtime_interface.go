// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/dell/csm-deployment/k8s (interfaces: ControllerRuntimeInterface)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockControllerRuntimeInterface is a mock of ControllerRuntimeInterface interface
type MockControllerRuntimeInterface struct {
	ctrl     *gomock.Controller
	recorder *MockControllerRuntimeInterfaceMockRecorder
}

// MockControllerRuntimeInterfaceMockRecorder is the mock recorder for MockControllerRuntimeInterface
type MockControllerRuntimeInterfaceMockRecorder struct {
	mock *MockControllerRuntimeInterface
}

// NewMockControllerRuntimeInterface creates a new mock instance
func NewMockControllerRuntimeInterface(ctrl *gomock.Controller) *MockControllerRuntimeInterface {
	mock := &MockControllerRuntimeInterface{ctrl: ctrl}
	mock.recorder = &MockControllerRuntimeInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockControllerRuntimeInterface) EXPECT() *MockControllerRuntimeInterfaceMockRecorder {
	return m.recorder
}

// CreateConfigMap mocks base method
func (m *MockControllerRuntimeInterface) CreateConfigMap(arg0 context.Context, arg1 []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateConfigMap", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateConfigMap indicates an expected call of CreateConfigMap
func (mr *MockControllerRuntimeInterfaceMockRecorder) CreateConfigMap(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateConfigMap", reflect.TypeOf((*MockControllerRuntimeInterface)(nil).CreateConfigMap), arg0, arg1)
}

// CreateNameSpace mocks base method
func (m *MockControllerRuntimeInterface) CreateNameSpace(arg0 context.Context, arg1 []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNameSpace", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateNameSpace indicates an expected call of CreateNameSpace
func (mr *MockControllerRuntimeInterfaceMockRecorder) CreateNameSpace(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNameSpace", reflect.TypeOf((*MockControllerRuntimeInterface)(nil).CreateNameSpace), arg0, arg1)
}

// CreateNameSpaceFromName mocks base method
func (m *MockControllerRuntimeInterface) CreateNameSpaceFromName(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNameSpaceFromName", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateNameSpaceFromName indicates an expected call of CreateNameSpaceFromName
func (mr *MockControllerRuntimeInterfaceMockRecorder) CreateNameSpaceFromName(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNameSpaceFromName", reflect.TypeOf((*MockControllerRuntimeInterface)(nil).CreateNameSpaceFromName), arg0, arg1)
}

// CreateSecret mocks base method
func (m *MockControllerRuntimeInterface) CreateSecret(arg0 context.Context, arg1 []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSecret", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateSecret indicates an expected call of CreateSecret
func (mr *MockControllerRuntimeInterfaceMockRecorder) CreateSecret(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSecret", reflect.TypeOf((*MockControllerRuntimeInterface)(nil).CreateSecret), arg0, arg1)
}

// CreateSecretFromName mocks base method
func (m *MockControllerRuntimeInterface) CreateSecretFromName(arg0 context.Context, arg1, arg2 string, arg3 []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSecretFromName", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateSecretFromName indicates an expected call of CreateSecretFromName
func (mr *MockControllerRuntimeInterfaceMockRecorder) CreateSecretFromName(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSecretFromName", reflect.TypeOf((*MockControllerRuntimeInterface)(nil).CreateSecretFromName), arg0, arg1, arg2, arg3)
}

// CreateTLSSecretFromName mocks base method
func (m *MockControllerRuntimeInterface) CreateTLSSecretFromName(arg0 context.Context, arg1 string, arg2, arg3, arg4 []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTLSSecretFromName", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateTLSSecretFromName indicates an expected call of CreateTLSSecretFromName
func (mr *MockControllerRuntimeInterfaceMockRecorder) CreateTLSSecretFromName(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTLSSecretFromName", reflect.TypeOf((*MockControllerRuntimeInterface)(nil).CreateTLSSecretFromName), arg0, arg1, arg2, arg3, arg4)
}

// DeleteNameSpaceByName mocks base method
func (m *MockControllerRuntimeInterface) DeleteNameSpaceByName(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteNameSpaceByName", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteNameSpaceByName indicates an expected call of DeleteNameSpaceByName
func (mr *MockControllerRuntimeInterfaceMockRecorder) DeleteNameSpaceByName(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteNameSpaceByName", reflect.TypeOf((*MockControllerRuntimeInterface)(nil).DeleteNameSpaceByName), arg0, arg1)
}
