// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/dell/csm-deployment/store (interfaces: StorageArrayTypeStoreInterface)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	model "github.com/dell/csm-deployment/model"
	gomock "github.com/golang/mock/gomock"
)

// MockStorageArrayTypeStoreInterface is a mock of StorageArrayTypeStoreInterface interface.
type MockStorageArrayTypeStoreInterface struct {
	ctrl     *gomock.Controller
	recorder *MockStorageArrayTypeStoreInterfaceMockRecorder
}

// MockStorageArrayTypeStoreInterfaceMockRecorder is the mock recorder for MockStorageArrayTypeStoreInterface.
type MockStorageArrayTypeStoreInterfaceMockRecorder struct {
	mock *MockStorageArrayTypeStoreInterface
}

// NewMockStorageArrayTypeStoreInterface creates a new mock instance.
func NewMockStorageArrayTypeStoreInterface(ctrl *gomock.Controller) *MockStorageArrayTypeStoreInterface {
	mock := &MockStorageArrayTypeStoreInterface{ctrl: ctrl}
	mock.recorder = &MockStorageArrayTypeStoreInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorageArrayTypeStoreInterface) EXPECT() *MockStorageArrayTypeStoreInterfaceMockRecorder {
	return m.recorder
}

// GetAll mocks base method.
func (m *MockStorageArrayTypeStoreInterface) GetAll() ([]model.StorageArrayType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].([]model.StorageArrayType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockStorageArrayTypeStoreInterfaceMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockStorageArrayTypeStoreInterface)(nil).GetAll))
}

// GetAllByID mocks base method.
func (m *MockStorageArrayTypeStoreInterface) GetAllByID(arg0 ...uint) ([]model.StorageArrayType, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAllByID", varargs...)
	ret0, _ := ret[0].([]model.StorageArrayType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllByID indicates an expected call of GetAllByID.
func (mr *MockStorageArrayTypeStoreInterfaceMockRecorder) GetAllByID(arg0 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllByID", reflect.TypeOf((*MockStorageArrayTypeStoreInterface)(nil).GetAllByID), arg0...)
}

// GetByID mocks base method.
func (m *MockStorageArrayTypeStoreInterface) GetByID(arg0 uint) (*model.StorageArrayType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", arg0)
	ret0, _ := ret[0].(*model.StorageArrayType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockStorageArrayTypeStoreInterfaceMockRecorder) GetByID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockStorageArrayTypeStoreInterface)(nil).GetByID), arg0)
}

// GetByName mocks base method.
func (m *MockStorageArrayTypeStoreInterface) GetByName(arg0 string) (*model.StorageArrayType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByName", arg0)
	ret0, _ := ret[0].(*model.StorageArrayType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByName indicates an expected call of GetByName.
func (mr *MockStorageArrayTypeStoreInterfaceMockRecorder) GetByName(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByName", reflect.TypeOf((*MockStorageArrayTypeStoreInterface)(nil).GetByName), arg0)
}
