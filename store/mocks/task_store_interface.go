// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/dell/csm-deployment/store (interfaces: TaskStoreInterface)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	model "github.com/dell/csm-deployment/model"
	gomock "github.com/golang/mock/gomock"
)

// MockTaskStoreInterface is a mock of TaskStoreInterface interface.
type MockTaskStoreInterface struct {
	ctrl     *gomock.Controller
	recorder *MockTaskStoreInterfaceMockRecorder
}

// MockTaskStoreInterfaceMockRecorder is the mock recorder for MockTaskStoreInterface.
type MockTaskStoreInterfaceMockRecorder struct {
	mock *MockTaskStoreInterface
}

// NewMockTaskStoreInterface creates a new mock instance.
func NewMockTaskStoreInterface(ctrl *gomock.Controller) *MockTaskStoreInterface {
	mock := &MockTaskStoreInterface{ctrl: ctrl}
	mock.recorder = &MockTaskStoreInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTaskStoreInterface) EXPECT() *MockTaskStoreInterfaceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockTaskStoreInterface) Create(arg0 *model.Task) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockTaskStoreInterfaceMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockTaskStoreInterface)(nil).Create), arg0)
}

// GetAll mocks base method.
func (m *MockTaskStoreInterface) GetAll() ([]model.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].([]model.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockTaskStoreInterfaceMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockTaskStoreInterface)(nil).GetAll))
}

// GetAllByApplication mocks base method.
func (m *MockTaskStoreInterface) GetAllByApplication(arg0 uint) ([]model.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllByApplication", arg0)
	ret0, _ := ret[0].([]model.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllByApplication indicates an expected call of GetAllByApplication.
func (mr *MockTaskStoreInterfaceMockRecorder) GetAllByApplication(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllByApplication", reflect.TypeOf((*MockTaskStoreInterface)(nil).GetAllByApplication), arg0)
}

// GetByID mocks base method.
func (m *MockTaskStoreInterface) GetByID(arg0 string) (*model.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", arg0)
	ret0, _ := ret[0].(*model.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockTaskStoreInterfaceMockRecorder) GetByID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockTaskStoreInterface)(nil).GetByID), arg0)
}

// Update mocks base method.
func (m *MockTaskStoreInterface) Update(arg0 *model.Task) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockTaskStoreInterfaceMockRecorder) Update(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockTaskStoreInterface)(nil).Update), arg0)
}
