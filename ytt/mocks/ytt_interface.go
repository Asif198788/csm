// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/dell/csm-deployment/ytt (interfaces: Interface)

// Package mocks is a generated GoMock package.
package mocks

import (
	store "github.com/dell/csm-deployment/store"
	ytt "github.com/dell/csm-deployment/ytt"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockInterface is a mock of Interface interface
type MockInterface struct {
	ctrl     *gomock.Controller
	recorder *MockInterfaceMockRecorder
}

// MockInterfaceMockRecorder is the mock recorder for MockInterface
type MockInterfaceMockRecorder struct {
	mock *MockInterface
}

// NewMockInterface creates a new mock instance
func NewMockInterface(ctrl *gomock.Controller) *MockInterface {
	mock := &MockInterface{ctrl: ctrl}
	mock.recorder = &MockInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockInterface) EXPECT() *MockInterfaceMockRecorder {
	return m.recorder
}

// ConfigMapTemplateFromApplication mocks base method
func (m *MockInterface) ConfigMapTemplateFromApplication(arg0 uint, arg1 store.ApplicationStateChangeStoreInterface) (ytt.Output, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConfigMapTemplateFromApplication", arg0, arg1)
	ret0, _ := ret[0].(ytt.Output)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConfigMapTemplateFromApplication indicates an expected call of ConfigMapTemplateFromApplication
func (mr *MockInterfaceMockRecorder) ConfigMapTemplateFromApplication(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfigMapTemplateFromApplication", reflect.TypeOf((*MockInterface)(nil).ConfigMapTemplateFromApplication), arg0, arg1)
}

// GenerateDynamicSecret mocks base method
func (m *MockInterface) GenerateDynamicSecret(arg0 uint, arg1 store.ApplicationStateChangeStoreInterface, arg2 store.ConfigFileStoreInterface) (ytt.Output, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateDynamicSecret", arg0, arg1, arg2)
	ret0, _ := ret[0].(ytt.Output)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateDynamicSecret indicates an expected call of GenerateDynamicSecret
func (mr *MockInterfaceMockRecorder) GenerateDynamicSecret(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateDynamicSecret", reflect.TypeOf((*MockInterface)(nil).GenerateDynamicSecret), arg0, arg1, arg2)
}

// GetEmptySecret mocks base method
func (m *MockInterface) GetEmptySecret(arg0 uint, arg1 store.ApplicationStateChangeStoreInterface) (ytt.Output, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEmptySecret", arg0, arg1)
	ret0, _ := ret[0].(ytt.Output)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEmptySecret indicates an expected call of GetEmptySecret
func (mr *MockInterfaceMockRecorder) GetEmptySecret(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEmptySecret", reflect.TypeOf((*MockInterface)(nil).GetEmptySecret), arg0, arg1)
}

// NamespaceTemplateFromApplication mocks base method
func (m *MockInterface) NamespaceTemplateFromApplication(arg0 uint, arg1 store.ApplicationStateChangeStoreInterface) (ytt.Output, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NamespaceTemplateFromApplication", arg0, arg1)
	ret0, _ := ret[0].(ytt.Output)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NamespaceTemplateFromApplication indicates an expected call of NamespaceTemplateFromApplication
func (mr *MockInterfaceMockRecorder) NamespaceTemplateFromApplication(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NamespaceTemplateFromApplication", reflect.TypeOf((*MockInterface)(nil).NamespaceTemplateFromApplication), arg0, arg1)
}

// SetOptions mocks base method
func (m *MockInterface) SetOptions(arg0 ...ytt.Option) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "SetOptions", varargs...)
}

// SetOptions indicates an expected call of SetOptions
func (mr *MockInterfaceMockRecorder) SetOptions(arg0 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetOptions", reflect.TypeOf((*MockInterface)(nil).SetOptions), arg0...)
}

// Template mocks base method
func (m *MockInterface) Template(arg0, arg1 []string) (ytt.Output, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Template", arg0, arg1)
	ret0, _ := ret[0].(ytt.Output)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Template indicates an expected call of Template
func (mr *MockInterfaceMockRecorder) Template(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Template", reflect.TypeOf((*MockInterface)(nil).Template), arg0, arg1)
}

// TemplateFromApplication mocks base method
func (m *MockInterface) TemplateFromApplication(arg0 uint, arg1 store.ApplicationStateChangeStoreInterface, arg2 store.ClusterStoreInterface, arg3 store.ConfigFileStoreInterface) (ytt.Output, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TemplateFromApplication", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(ytt.Output)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TemplateFromApplication indicates an expected call of TemplateFromApplication
func (mr *MockInterfaceMockRecorder) TemplateFromApplication(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TemplateFromApplication", reflect.TypeOf((*MockInterface)(nil).TemplateFromApplication), arg0, arg1, arg2, arg3)
}
