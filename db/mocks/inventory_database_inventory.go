// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/dell/csm-deployment/db (interfaces: InventoryDatabaseInterface)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	gorm "gorm.io/gorm"
)

// MockInventoryDatabaseInterface is a mock of InventoryDatabaseInterface interface.
type MockInventoryDatabaseInterface struct {
	ctrl     *gomock.Controller
	recorder *MockInventoryDatabaseInterfaceMockRecorder
}

// MockInventoryDatabaseInterfaceMockRecorder is the mock recorder for MockInventoryDatabaseInterface.
type MockInventoryDatabaseInterfaceMockRecorder struct {
	mock *MockInventoryDatabaseInterface
}

// NewMockInventoryDatabaseInterface creates a new mock instance.
func NewMockInventoryDatabaseInterface(ctrl *gomock.Controller) *MockInventoryDatabaseInterface {
	mock := &MockInventoryDatabaseInterface{ctrl: ctrl}
	mock.recorder = &MockInventoryDatabaseInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInventoryDatabaseInterface) EXPECT() *MockInventoryDatabaseInterfaceMockRecorder {
	return m.recorder
}

// AutoMigrate mocks base method.
func (m *MockInventoryDatabaseInterface) AutoMigrate(arg0 ...interface{}) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AutoMigrate", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// AutoMigrate indicates an expected call of AutoMigrate.
func (mr *MockInventoryDatabaseInterfaceMockRecorder) AutoMigrate(arg0 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AutoMigrate", reflect.TypeOf((*MockInventoryDatabaseInterface)(nil).AutoMigrate), arg0...)
}

// FirstOrCreate mocks base method.
func (m *MockInventoryDatabaseInterface) FirstOrCreate(arg0 interface{}, arg1 ...interface{}) *gorm.DB {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FirstOrCreate", varargs...)
	ret0, _ := ret[0].(*gorm.DB)
	return ret0
}

// FirstOrCreate indicates an expected call of FirstOrCreate.
func (mr *MockInventoryDatabaseInterfaceMockRecorder) FirstOrCreate(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FirstOrCreate", reflect.TypeOf((*MockInventoryDatabaseInterface)(nil).FirstOrCreate), varargs...)
}
